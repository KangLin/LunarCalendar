name: cmake_windows

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
        
    - name: git clone --recursive
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run:  git submodule update --init --recursive

    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@88f3374475d094ce56ca6a7cc41cfda5a6ec093c
      uses: jurplel/install-qt-action@v2.13.0
      with:
        # Directory to install Qt
        #dir: # optional
        # Version of Qt to install
        version: 5.12.10 # optional, default is 5.15.2
        # Host platform
        host: windows # optional
        # Target platform for build
        #target: # optional, default is desktop
        # Architecture for Windows/Android
        #arch: win32_msvc2015 # optional
        # Whether or not to install Qt dependencies on Linux
        #install-deps: # optional, default is true
        # Additional Qt modules to install
        #modules: # optional
        # Whether or not to actually download Qt
        #cached: # optional, default is false
        # Whether or not to automatically run setup-python to find a valid python version.
        #setup-python: # optional, default is true
        # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
        #tools: # optional
        # Whether or not to set environment variables after running aqtinstall
        #set-env: # optional, default is true
        # Whether or not to actually install Qt or just the tools from the tools argument
        #tools-only: # optional, default is false
        # Version of aqtinstall to use in case of issues
        #aqtversion: # optional, default is ==1.1.3
        # Version of py7zr to use in case of issues
        #py7zrversion: # optional, default is ==0.14.0
        # Any extra arguments to append to the back
        #extra: # optional

    - name: git clone RabbitCommon
      working-directory: ${{github.workspace}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install
      env:
        RabbitCommon_DIR: ${{github.workspace}}/RabbitCommon

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --config ${{env.BUILD_TYPE}}
        cmake --build . --config ${{env.BUILD_TYPE}} --target install-runtime
        makensis ${{github.workspace}}/build/Install.nsi

    - name: update 
      uses: actions/upload-artifact@v2
      with:
        name: Calendar-Setup-v1.0.3.exe
        path: |
          ${{github.workspace}}/build/Calendar-Setup-*.exe
          #${{github.workspace}}/build/update_*.xml

    - name: Upload To Github Release
      # You may pin to the exact commit or the version.
      # uses: xresloader/upload-to-github-release@3ad14478ee4fb9bd65e84c6d496a7d6862892f43
      uses: xresloader/upload-to-github-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The files or file patterns to upload. You can upload multiple files by split them by semicolon. You can use the glob pattern to find the files.
        file: ${{github.workspace}}/build/Calendar-Setup-*.exe
        # The files or file patterns to delete before uploading new files. You can delete multiple files by split them by semicolon. You can use the glob pattern to find the files.
        #delete_file: # optional, default is 
        # If you need to overwrite existing files, add overwrite: true to the with.
        #overwrite: # optional, default is false
        # The resultant deployment is a draft Release that only repository collaborators can see. This gives you an opportunity to examine and edit the draft release.
        draft: false # optional, default is true
        # The resultant deployment is a Prerelease. This gives you an opportunity to examine and edit the prerelease.
        prerelease: true # optional, default is false
        # With tags: true, your Releases deployment will trigger if and only if the build is a tagged build.
        #tags: true # optional, default is false
        # Only work on these branches(splited by semicolon), set to nothing to accept all branches.
        #branches: master # optional, default is 
        # With verbose: true, be verbose.
        verbose: true # optional, default is false
        # Set custom tag name.
        #tag_name: 'v0.0.4'
        # If try to update latest release.
        #update_latest_release: true # optional, default is false
      if: startsWith(github.ref, 'refs/tags/')
